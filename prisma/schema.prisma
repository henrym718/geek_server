generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum Role {
  CLIENT
  VENDOR
}

enum Status {
  ACTIVE
  CANCELED
  FINISHED
  ACCEPTED
  REJECTED
}

model User {
  id            String       @id
  email         String       @unique
  password      String?
  provider      AuthProvider
  tokenProvider String?
  username      String       @unique
  role          Role
  refresToken   String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  client        Client?
  vendor        Vendor?

  @@map("users")
}

model Client {
  id               String            @id
  firstName        String
  lastName         String
  photo            String?
  phone            String
  city             String
  isActive         Boolean           @default(true)
  user             User              @relation(fields: [id], references: [id])
  proformaRequests ProformaRequest[]

  @@map("clients")
}

model Vendor {
  id             String          @id
  firstName      String
  lastName       String
  photo          String?
  phone          String
  city           String
  isActive       Boolean         @default(true)
  user           User            @relation(fields: [id], references: [id])
  vendorProfiles VendorProfile[]

  @@map("vendors")
}

model VendorProfile {
  id                String             @id
  tittle            String
  aboutme           String
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  vendor            Vendor             @relation(fields: [vendorId], references: [id])
  vendorId          String             @unique
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        String
  skills            Skill[]
  proformaResponses ProformaResponse[]

  @@map("vendor_profiles")
}

model Group {
  id         String     @id
  name       String     @unique
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  @@map("groups")
}

model Category {
  id               String            @id
  name             String            @unique
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  group            Group             @relation(fields: [groupId], references: [id])
  groupId          String
  profiles         VendorProfile[]
  skills           Skill[]
  proformaRequests ProformaRequest[]
  SearchSuggestion Suggestion[]

  @@map("categories")
}

model Skill {
  id               String            @id
  name             String            @unique
  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       String
  profileVendors   VendorProfile[]
  proformaRequests ProformaRequest[]
  SearchSuggestion Suggestion[]

  @@map("skills")
}

model Suggestion {
  id         String   @id
  text       String
  skill      Skill    @relation(fields: [skillId], references: [id])
  skillId    String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@index([text], map: "idx_search_text")
  @@map("suggestions")
}

model ProformaRequest {
  id                String             @id
  description       String
  budget            Float
  status            Status
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  client            Client             @relation(fields: [clientId], references: [id])
  clientId          String
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        String
  skills            Skill[]
  proformaResponses ProformaResponse[]

  @@map("proforma_requests")
}

model ProformaResponse {
  id                String          @id
  budget            Float
  message           String
  status            Status
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  proformaRequest   ProformaRequest @relation(fields: [proformaRequestId], references: [id])
  proformaRequestId String
  vendorProfile     VendorProfile   @relation(fields: [profileVendorId], references: [id])
  profileVendorId   String

  @@unique([proformaRequestId, profileVendorId])
  @@map("proforma_responses")
}
