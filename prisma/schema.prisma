generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum Role {
  CLIENT
  VENDOR
}

enum BudgetUnit {
  PROJECT
  HOUR
  DAY
  WEEK
  MONTH
}

enum StatusRequest {
  ACTIVE
  ANNULLED
  FINISHED
  MATCHED
}

enum StatusResponse {
  PENDING
  ACCEPTED
  REJECTED
}

enum ProjectType {
  ONE_TIME
  RECURRING
}

enum ProjectLength {
  SINGLE_DAY
  FEW_DAYS
  ONE_WEEK
  TWO_FOUR_WEEKS
  ONE_THREE_MONTHS
  THREE_SIX_MONTHS
  GT_SIX_MONTHS
  INDEFINITE
}

enum ProjectWorkload {
  LT_TEN
  TEN_TWENTY
  TWENTY_THIRTY
  THIRTY_FORTY
  GT_FORTY
  VARIABLE
  FLEXIBLE
}

model User {
  id             String       @id
  email          String       @unique
  password       String?
  provider       AuthProvider
  tokenProvider  String?
  username       String       @unique
  role           Role
  refreshToken   String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  client         Client?
  vendor         Vendor?
  messages       Message[]
  chatsInitiated Chat[]       @relation("client")
  chatsReceived  Chat[]       @relation("vendor")

  @@map("users")
}

model Client {
  id               String            @id
  firstName        String
  lastName         String
  photo            String?
  phone            String
  city             City              @relation(fields: [cityId], references: [id])
  cityId           String
  isActive         Boolean           @default(true)
  user             User              @relation(fields: [id], references: [id])
  proformaRequests ProformaRequest[]

  @@map("clients")
}

model Vendor {
  id             String          @id
  firstName      String
  lastName       String
  photo          String?
  phone          String
  city           City            @relation(fields: [cityId], references: [id])
  cityId         String
  isActive       Boolean         @default(true)
  user           User            @relation(fields: [id], references: [id])
  vendorProfiles VendorProfile[]

  @@map("vendors")
}

model VendorProfile {
  id                String             @id
  title             String
  aboutme           String
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  vendor            Vendor             @relation(fields: [vendorId], references: [id])
  vendorId          String
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        String
  skills            Skill[]
  proformaResponses ProformaResponse[]

  @@map("vendor_profiles")
}

model Group {
  id         String     @id
  name       String     @unique
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  @@map("groups")
}

model Category {
  id               String            @id
  name             String            @unique
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  group            Group             @relation(fields: [groupId], references: [id])
  groupId          String
  profiles         VendorProfile[]
  skills           Skill[]
  proformaRequests ProformaRequest[]
  SearchSuggestion Suggestion[]

  @@map("categories")
}

model Skill {
  id               String            @id
  name             String            @unique
  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       String
  profileVendors   VendorProfile[]
  proformaRequests ProformaRequest[]
  SearchSuggestion Suggestion[]

  @@map("skills")
}

model City {
  id               String            @id
  name             String            @unique
  proformaRequests ProformaRequest[]
  Client           Client[]
  Vendor           Vendor[]

  @@map("cities")
}

model Suggestion {
  id         String   @id
  text       String
  skill      Skill    @relation(fields: [skillId], references: [id])
  skillId    String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@index([text], map: "idx_search_text")
  @@map("suggestions")
}

model ProformaRequest {
  id                String             @id
  title             String
  description       String
  budget            Float?
  budgetUnit        BudgetUnit?
  quotation         Boolean?
  projectType       ProjectType
  projectLength     ProjectLength
  projectWorkload   ProjectWorkload
  status            StatusRequest
  countResponses    Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  client            Client             @relation(fields: [clientId], references: [id])
  clientId          String
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        String
  skills            Skill[]
  proformaResponses ProformaResponse[]
  city              City               @relation(fields: [cityId], references: [id])
  cityId            String

  @@map("proforma_requests")
}

model ProformaResponse {
  id                String          @id
  budget            Float?
  message           String
  status            StatusResponse
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  proformaRequest   ProformaRequest @relation(fields: [proformaRequestId], references: [id])
  proformaRequestId String
  vendorProfile     VendorProfile   @relation(fields: [profileVendorId], references: [id])
  profileVendorId   String

  @@unique([proformaRequestId, profileVendorId])
  @@map("proforma_responses")
}

model Chat {
  id        String    @id
  client    User      @relation("client", fields: [clientId], references: [id])
  clientId  String
  vendor    User      @relation("vendor", fields: [vendorId], references: [id])
  vendorId  String
  messages  Message[]
  createdAt DateTime  @default(now())

  @@unique([clientId, vendorId])
  @@index([clientId])
  @@index([vendorId])
  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  createdAt DateTime @default(now())

  @@index([chatId])
  @@map("messages")
}
