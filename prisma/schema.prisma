generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum Role {
  CLIENT
  VENDOR
}

//
// üîπ MODELO PRINCIPAL DE USUARIOS
//
model User {
  id            String       @id
  email         String       @unique
  password      String?
  provider      AuthProvider
  tokenProvider String?
  role          Role
  refresToken   String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  client        Client?
  vendor        Vendor?

  @@map("users")
}

//
// üîπ MODELO DE CLIENTES
//
model Client {
  id               String            @id
  firstName        String
  lastName         String
  photo            String?
  city             String
  isActive         Boolean           @default(true)
  user             User              @relation(fields: [id], references: [id])
  proformaRequests ProformaRequest[] // Un cliente puede hacer m√∫ltiples solicitudes de proformas

  @@map("clients")
}

//
// üîπ MODELO DE VENDEDORES
//
model Vendor {
  id        String             @id
  firstName String
  lastName  String
  photo     String
  phone     String
  city      String
  isActive  Boolean            @default(true)
  user      User               @relation(fields: [id], references: [id])
  profiles  ProfileVendor[] // Un vendor puede tener m√∫ltiples perfiles
  responses ProformaResponse[] // Un vendor puede enviar m√∫ltiples respuestas a solicitudes

  @@map("vendors")
}

//
// üîπ MODELO DE PERFILES DE VENDEDORES
//
model ProfileVendor {
  id         String   @id
  tittle     String
  skills     String[]
  aboutme    String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  vendorId   String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  skill      Skill[]

  @@map("profile_vendors")
}

//
// üîπ MODELOS PARA CATEGOR√çAS Y GRUPOS
//
model Group {
  id         String     @id
  name       String
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  @@map("groups")
}

model Category {
  id        String          @id
  name      String
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  group     Group           @relation(fields: [groupId], references: [id])
  groupId   String
  profiles  ProfileVendor[]
  Skill     Skill[]

  @@map("categories")
}

//
// üîπ MODELO DE SKILLS (LAS CATEGORIAS TIENEN SKILLS Y LOS PROFILES USAN ESAS SKILLS ASI COMO LAS PREFORMAREQUEST)
//
model Skill {
  id            String          @id
  name          String
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  profileVendor ProfileVendor[]

  @@map("skills")
}

//
// üîπ MODELO DE SOLICITUDES DE PROFORMA (CLIENTES PIDEN TRABAJOS)
//
model ProformaRequest {
  id          String             @id
  description String
  budget      Float
  status      String             @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  client      Client             @relation(fields: [clientId], references: [id])
  clientId    String
  responses   ProformaResponse[] // Relaci√≥n: Una solicitud puede recibir m√∫ltiples respuestas de vendors

  @@map("proforma_requests")
}

//
// üîπ MODELO DE RESPUESTAS A PROFORMAS (VENDEDORES HACEN OFERTAS)
//
model ProformaResponse {
  id                String          @id
  price             Float
  message           String
  status            String          @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  proformaRequest   ProformaRequest @relation(fields: [proformaRequestId], references: [id])
  proformaRequestId String
  vendor            Vendor          @relation(fields: [vendorId], references: [id])
  vendorId          String

  @@map("proforma_responses")
}
